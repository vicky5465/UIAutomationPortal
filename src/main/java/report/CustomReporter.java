package report;

import java.util.Calendar;
//import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
//import java.util.HashSet;
import java.util.List;
import java.util.Map;
//import java.util.Set;
import java.util.Set;

import org.testng.IReporter;
import org.testng.IResultMap;
import org.testng.ISuite;
import org.testng.ISuiteResult;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.xml.XmlSuite;

import com.jayway.jsonpath.JsonPath;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class CustomReporter implements IReporter {

	private static Map<String, TestResult> map = new HashMap<>();
	private ExtentReports extent;
	private Set<String> testSet = new HashSet<String>();

	public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {
		//initialize the report 
		extent = new ExtentReports("test-output/ExtentReportTestNG.html", true);

		for (ISuite suite : suites) {
			//to get the whole result for suite, returned as Map<String, ISuiteResult>
			Map<String, ISuiteResult> result = suite.getResults();

			//to get each result for suite
			for (ISuiteResult r : result.values()) {
				//to get test context
				ITestContext context = r.getTestContext();

				//this is to get the test name
				String name = context.getName();
				System.out.println("test name: " + name);
				//start the test
				ExtentTest test = extent.startTest(name);
				//remove the existed tests
				testSet.clear();

				//				//to track the test start time and end time, which is generated by TestNG				
				//				Date start = new Date(ReportManager.getTestResult(name).getStartMillis());

				//this is the report time, used as the test end time
				Date end = new Date(System.currentTimeMillis());

				//				test.setStartedTime(start);
				//				test.setEndedTime(end);
				//				System.out.println("test start time is: " + start + "  for test " + name);

				System.out.println("test end time is: " + end + "  for test " + name);

				//
				List<String> outputs = Reporter.getOutput();//to get the log info I've added
				for(String output : outputs){
					System.out.println(output);
				}
				//				System.out.println("test start time is: " + new Date(Reporter.getCurrentTestResult().getStartMillis()));
				//				System.out.println("test end time is: " + new Date(Reporter.getCurrentTestResult().getEndMillis()));

				buildTestNodes(context.getPassedTests(), LogStatus.PASS, name, test);
				buildTestNodes(context.getFailedTests(), LogStatus.FAIL, name, test);
				buildTestNodes(context.getSkippedTests(), LogStatus.SKIP, name, test);
				buildTestNodes(context.getPassedTests(), LogStatus.INFO, name, test);


				extent.endTest(test);
				extent.flush();
				//				buildTestNodes(context.getPassedTests(), LogStatus.PASS, name);
				//				buildTestNodes(context.getFailedTests(), LogStatus.FAIL, name);
				//				buildTestNodes(context.getSkippedTests(), LogStatus.SKIP, name);
			}
		}
		extent.close();
	}


	private void buildTestNodes(IResultMap tests, LogStatus status, String testName, ExtentTest test) {
		//	private void buildTestNodes(IResultMap tests, LogStatus status, String name) {
		ExtentTest method;

		if (tests.size() > 0) {
			for (ITestResult result : tests.getAllResults()) {
				int i=1;
//				System.out.println("This is the " + i + "th test");
				Reporter.setCurrentTestResult(result);
				//				test.setStartedTime(getTime(result.getStartMillis()));
				//				test.setEndedTime(getTime(result.getEndMillis()));
				//				System.out.println("test start time is: " + test.getStartedTime() + "  for test " + testName);
				//				System.out.println("test end time is: " + test.getEndedTime() + "  for test " + testName);

				String testMethodName = result.getName();
				if (!testSet.contains(testMethodName)) {
					testSet.add(testMethodName);
					method = extent.startTest(testMethodName);

					test.getTest().setStartedTime(getTime(result.getStartMillis()));
					Date start1 = new Date(Reporter.getCurrentTestResult().getStartMillis());
					Date end1 = new Date(Reporter.getCurrentTestResult().getEndMillis());
//					System.out.println("REPORTER start time is: " + start1 + "  for test ");
//					System.out.println("Reporter end time is: " + end1 + "  for test ");
//					System.out.println("method " + testMethodName + " start time is: "+test.getTest().getStartedTime()) ;
					test.getTest().setEndedTime(getTime(result.getEndMillis()));
//					System.out.println("method " + testMethodName + " end time is: "+test.getTest().getEndedTime()) ;

					for (String group : result.getMethod().getGroups())
						method.assignCategory(group);

					String message = "Test " + status.toString().toLowerCase() + "ed";

					if (result.getThrowable() != null)
						message = result.getThrowable().getMessage();

					String param ="";
					for(Object out : Reporter.getCurrentTestResult().getParameters()){

						String test1 = Reporter.getCurrentTestResult().getName();
//						System.out.println("Param for test: " + test1 + " is: " + out);
						param = out.toString();
					}


					for(Object out : Reporter.getOutput()){
						
//						System.out.println("output size is: " + Reporter.getOutput().size());
						String test1 = Reporter.getCurrentTestResult().getName();
//						System.out.println("Result for test is: "+Reporter.getOutput(result));//output for this test result
//						System.out.println("Output for test: " + test1 + " is: " + out);
						param = out.toString();
						
					}



					if(status.equals(LogStatus.FAIL)){
						System.out.println("testing screenshots");
						method.log(status, testMethodName+"["+param+"]", "Snapshot below: " + method.addScreenCapture("test-output/screenshot"));
					}else
						method.log(status, testMethodName+"["+param+"]", message);
					test.appendChild(method);
					i++;
				}
			}
		}
	}


	private Date getTime(long millis) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(millis);
		return calendar.getTime();        
	}

	public static List<String> getOutput(String testName, String methodName) {
		TestResult res = map.get(testName);
		if (res != null) {
			return res.getOutput(methodName);
		}
		return null;
	}
}
